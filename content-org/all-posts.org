#+hugo_base_dir: ../
#+hugo_auto_set_lastmod: t

# To add automatic timestamp updates to a subtree, add
# :EXPORT_HUGO_AUTO_SET_LASTMOD:
# to the properties
# For some reason, I think the global #+hugo_auto_set_lastmod: t
# file setting was causing my Emacs to freeze. It's still freezing. 
# Can't figure out why, but it definitely started (and seems to be
# related to) when I added the auto set lastmod stuff.
#
# To answer the above remark, it only freezes if I do not have :EXPORT_DATE: set
# in a post I attempt to export

# Code blocks
#
# We have to be careful about creating code blocks in our blog posts. First of
# all, inline code looks shitty because the Blowfish theme doesn't do a very
# good job of styling it. Second of all, ox-hugo needs certain setup:
# https://github.com/kaushalmodi/ox-hugo/blob/3070aaab5bbe297b6f90620c29171ced0bd4c439/test/site/content/posts/inline-code-blocks.md

* Notes
** Latex preview PNGs
  My PNGs that are the LaTeX preview from ORG/* are showing up in this
  =cdell.io/static/ltximg= when I run =org-hugo-export-wim-to-md=.

  Note: a temporary workaround for this dilemma is to .gitignore
  =static/ltximg/*=, but this will likely interfere with embedded LaTeX in
  Github Pages

  The real concern here is committing content that is not intended for a
  publicly facing repo, as Github Pages /must/ be.
** Known issues
- It looks like changing tags/categories will break a running server, locally.
- Tags can't contain hyphens
  - Can they be escaped?
** Where does a file export to?
By default, files will export to =/posts=.
Override this through a number of avenues:
- Set =org-hugo-default-section-directory= to something else
- Configure it file-wide with =#+hugo_section:= front-matter
- Configure it per subtree with =:EXPORT_HUGO_SECTION:=
For more, see https://ox-hugo.scripter.co/doc/hugo-section/.
* todo
** Set up Github Pages publishing with Actions
* DONE Homepage _index
:PROPERTIES:
:EXPORT_FILE_NAME: _index
:EXPORT_HUGO_TYPE: homepage
:EXPORT_HUGO_SECTION: /
:END:
* DONE Thoughts
:PROPERTIES:
:EXPORT_FILE_NAME: _index
:EXPORT_HUGO_SECTION: thoughts/
:EXPORT_DATE: <2022-10-30 Sun>
:END:
* DONE About Me
:PROPERTIES:
:EXPORT_FILE_NAME: about
:EXPORT_HUGO_SECTION: /
:EXPORT_DATE: <2022-11-01 Tue>
:EXPORT_HUGO_LASTMOD: <2022-11-01 Tue>
:END:
My name's Christian, and I'm about as regular as it gets. I work for a tech
company and I write sh*tty code (probably). I enjoy a good beer and my dad's old
rock/grunge. I like to think deeply about questions I'll never know the answer
to. I am from the midwestern United States.

If you'd like to contact me and have something important to say, please send me
a PGP encrypted email to cdelliott96 (at) gmail (dot) com. Of course, I accept
communication from anyone, I just may not open your links if I don't know you. üëçüèΩ

Here is my PGP fingerprint:
#+begin_src text
8D2D 37DE F5DE CF38 DDDD  4315 8E72 EDFF 29CF 4310
#+end_src
and [[file:/main-pub.key][here]] is my PGP public key. üîê

* DONE My First Post
:PROPERTIES:
:EXPORT_FILE_NAME: my-first-post
:EXPORT_HUGO_SECTION: thoughts/
:EXPORT_DATE: <2022-10-28 Fri>
:EXPORT_HUGO_LASTMOD: <2022-10-28 Fri>
:END:
** "What is my purpose?"
[[file:/img/rick-and-morty-my-purpose.gif]]

I am still trying to figure out the topic for my very first post. I'm sure that,
in hindsight, it won't matter. Starting is usually more important than how you
actually start. But paralysis by analysis is kind of my thing, so.

Before I really get too far into coming up with potential topics for this first
post, I should probably try to narrow down what this blog is going to be about
in general. If nothing else, I just want this blog to represent /me/. I want it
to be organic and authentic. Given I'm a human being that is always evolving,
that means this blog's whole state is going to be dynamic. Maybe it's ok that I
don't come up with a concrete focus and theme.

I think I've just finished my first blog post. It's only downhill from here!

Cheers.
* TODO How I Made This Blog
:PROPERTIES:
:EXPORT_FILE_NAME: how-i-make-this-blog
:EXPORT_HUGO_SECTION: thoughts/
:EXPORT_DATE: <2022-11-26 Sat>
:END:
A summary of how this blog is constructed and my blogging workflow
** It All Starts With Org Mode
Emacs' [[https://orgmode.org/][Org Mode]] has been a really critical discovery in the last couple years of
my life. At some point or another, I decided I wanted to truly revamp my
personal organization, in essentially all regards. I have always struggled with
note taking and keeping a planner and even maintaining any kind of TODO lists.
In short, my personal organization didn't exist before Org Mode. Nevertheless,
it does now.

I won't go too far into explaining Org Mode, since the motivated reader can
Google themselves. But in summary, it is a Markdown-esque system that works on
plain text files. The "mode" part (where the magic really happens) lives in
Emacs. It is safe to say that the benefit of Org Mode can only be fully
understood if using it within Emacs, and that is perhaps seen as a blessing to
some and a curse to others. Personally, I love Emacs. But I am already
encroaching on dangerous ranty territory if I continue in this direction, so I
shall move along.

To be certain, mentioning Emacs' org-mode is necessary because it is the basis
for my whole workflow. I write in Org Mode. I note take. I journal. I plan. I
sometimes code. I create in Org Mode. So when I set out to make a blog, it
needed to encorporate my Org Mode workflow.
** Design Decisions
The next step in determining how to create my blog was a more challenging
and impactful choice. As stated, the actual content of my blog needed to come
from an org file, but otherwise there were really no limiting parameters. I
weighed the option of generic web application, e.g. React on Rails (since I am
familiar with that from work), but frankly even that seemed overkill for my
"blog" want. I just wanted to take my content and have it sent straight to my
blog. Simple... right?

At work I've also utilized some Github Pages documentation sites. Github Pages
itself defaults to using Jekyll, a [[https://en.wikipedia.org/wiki/Static_site_generator][static site generator]]. So I already had some
knowledge of static site generators and what they are used for. It didn't take
much Googling to discover that Emacs already has tools like [[https://emacs.love/weblorg/][weblorg]] and [[https://orgmode.org/worg/org-blog-wiki.html][others]]
to assist in the content-to-blog workflow I was seeking. It became obvious quite
quickly that utilizing a static site generator would be my best bet, since I
didn't seek any other functionality and they are fairly simple in general. With
this setup, there'd be no manually setting up routes or configuring certain
controllers as I would in a RoR app - not to mention that I could grab a free
theme and get started almost immediately on deploying the site.

In the end, I liked the way [[https://ox-hugo.scripter.co/][ox-hugo]] approached the workflow I was looking for.
It prioritizes the option for keeping all your content in a single org file
(called subtree exporting), which simplifies things a lot for me. I can view all
of my blog's content in one place, and manage the export location in the
subtree's metadata. If you're familiar with web development, the name ox-hugo
might have also clued you in on my static site generator of choice: Hugo. In
making this decision about ox-hugo I essentially killed two birds with one
stone, and didn't have to spend anymore time looking at the pros and cons of,
say, Jekyll, Hugo, etc. All that remained was to choose my theme.
** It's Gotta Look Good
To me, the look and feel of any application or website is everything. Frankly, I
am a very novice software engineer and have no experience with UI/UX design, but
I do know a good color scheme when I see one (tangential self-plug: I'm writing
this in [[file:/img/how-i-make-this-blog/doom-emacs-zenburn.png][Doom Emacs using the Zenburn palette]] - it's pure joy). It took about a
day for me to stumble upon the simple [[https://github.com/nunocoracao/blowfish][Blowfish]] theme and I really enjoy it. I
wanted something that was both minimal and pleasant to look at. I think Blowfish
accomplishes this nicely, and it comes with a lot of features to boot. Honestly
I'm a little surprised by the fact that it has a relatively small number of
Github stars. After about three weeks of getting familiar with it, I don't have
any major complaints.
** End
I debated for a while about how technical I'd get with this post. However, being
detailed and retracing my steps for setup and initial deployment and the Github
Pages stuff would take a decent amount of extra time, and right now I am
prioritizing producing content for my blog, not on making tutorials. So that's
where I will end things! I am /really/ enjoying the setup I'm using. That part
is important to me, because if I don't enjoy it, I'll stop doing it.

If you've made it this far, thanks and cheers.
